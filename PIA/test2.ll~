; ModuleID = 'Position Independent Arithmetic'
target datalayout = "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "spir-unknown-unknown-unknown"

define void @stencil(float* noalias nocapture %I0, float* noalias nocapture %O0, float %c0, float %c1, float %c2, i32 %size_x, i32 %size_y) {
entry:
  %0 = sub i32 %size_y, 1
  %1 = sub i32 %size_x, 1
  br label %loop

loop:                                             ; preds = %afterloop, %entry
  %i = phi i32 [ 1, %entry ], [ %next_lop_var9, %afterloop ]
  br label %loop1

loop1:                                            ; preds = %loop1, %loop
  %j = phi i32 [ 1, %loop ], [ %next_lop_var, %loop1 ]
  %2 = add nsw i32 %i, -1
  %3 = mul i32 %2, %size_x
  %4 = add nsw i32 %j, -1
  %5 = add nsw i32 %3, %4
  %I0_addr = getelementptr inbounds float* %I0, i32 %5
  %I0_value = load float* %I0_addr
  %multmp = fmul float %I0_value, %c0
  %6 = add nsw i32 %i, 0
  %7 = mul i32 %6, %size_x
  %8 = add nsw i32 %j, 0
  %9 = add nsw i32 %7, %8
  %I0_addr2 = getelementptr inbounds float* %I0, i32 %9
  %I0_value3 = load float* %I0_addr2
  %multmp4 = fmul float %I0_value3, %c1
  %addtmp = fadd float %multmp, %multmp4
  %10 = add nsw i32 %i, 1
  %11 = mul i32 %10, %size_x
  %12 = add nsw i32 %j, 1
  %13 = add nsw i32 %11, %12
  %I0_addr5 = getelementptr inbounds float* %I0, i32 %13
  %I0_value6 = load float* %I0_addr5
  %multmp7 = fmul float %I0_value6, %c2
  %addtmp8 = fadd float %addtmp, %multmp7
  %14 = mul i32 %i, %size_x
  %15 = add nsw i32 %14, %j
  %O0_addr = getelementptr inbounds float* %O0, i32 %15
  store float %addtmp8, float* %O0_addr
  %next_lop_var = add nsw i32 %j, 1
  %16 = icmp slt i32 %j, %1
  br i1 %16, label %loop1, label %afterloop

afterloop:                                        ; preds = %loop1
  %next_lop_var9 = add nsw i32 %i, 1
  %17 = icmp slt i32 %i, %0
  br i1 %17, label %loop, label %afterloop10

afterloop10:                                      ; preds = %afterloop
  ret void
}
