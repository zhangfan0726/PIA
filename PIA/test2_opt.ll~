; ModuleID = 'test2_clang.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind
define void @func(float* noalias nocapture readonly %I0, float* noalias nocapture %O0, float %c0, float %c1, float %c2, i32 %size_x, i32 %size_y) #0 {
  %1 = icmp sgt i32 %size_y, 1
  br i1 %1, label %.preheader.lr.ph, label %._crit_edge3

.preheader.lr.ph:                                 ; preds = %0
  %2 = icmp sgt i32 %size_x, 1
  %3 = add i32 %size_x, -2
  %4 = zext i32 %3 to i64
  %5 = add i64 %4, 1
  br label %.preheader

.preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
  %indvars.iv4 = phi i64 [ 1, %.preheader.lr.ph ], [ %indvars.iv.next5, %._crit_edge ]
  br i1 %2, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %6 = trunc i64 %indvars.iv4 to i32
  %7 = mul nsw i32 %6, %size_x
  %8 = sext i32 %7 to i64
  %end.idx = add i64 %5, 1
  %n.mod.vf = urem i64 %5, 8
  %n.vec = sub i64 %5, %n.mod.vf
  %end.idx.rnd.down = add i64 %n.vec, 1
  %cmp.zero = icmp eq i64 %end.idx.rnd.down, 1
  br i1 %cmp.zero, label %middle.block, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %broadcast.splatinsert2 = insertelement <4 x i64> undef, i64 %8, i32 0
  %broadcast.splat3 = shufflevector <4 x i64> %broadcast.splatinsert2, <4 x i64> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %c0, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert9 = insertelement <4 x float> undef, float %c1, i32 0
  %broadcast.splat10 = shufflevector <4 x float> %broadcast.splatinsert9, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert13 = insertelement <4 x float> undef, float %c2, i32 0
  %broadcast.splat14 = shufflevector <4 x float> %broadcast.splatinsert13, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert15 = insertelement <4 x i32> undef, i32 %size_x, i32 0
  %broadcast.splat16 = shufflevector <4 x i32> %broadcast.splatinsert15, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 1, %vector.ph ], [ %index.next, %vector.body ]
  %broadcast.splatinsert = insertelement <4 x i64> undef, i64 %index, i32 0
  %broadcast.splat = shufflevector <4 x i64> %broadcast.splatinsert, <4 x i64> undef, <4 x i32> zeroinitializer
  %induction = add <4 x i64> %broadcast.splat, <i64 0, i64 1, i64 2, i64 3>
  %induction1 = add <4 x i64> %broadcast.splat, <i64 4, i64 5, i64 6, i64 7>
  %9 = add nsw <4 x i64> %induction, %broadcast.splat3
  %10 = add nsw <4 x i64> %induction1, %broadcast.splat3
  %11 = add nsw <4 x i64> %9, <i64 -1, i64 -1, i64 -1, i64 -1>
  %12 = add nsw <4 x i64> %10, <i64 -1, i64 -1, i64 -1, i64 -1>
  %13 = extractelement <4 x i64> %11, i32 0
  %14 = getelementptr inbounds float* %I0, i64 %13
  %15 = insertelement <4 x float*> undef, float* %14, i32 0
  %16 = extractelement <4 x i64> %11, i32 1
  %17 = getelementptr inbounds float* %I0, i64 %16
  %18 = insertelement <4 x float*> %15, float* %17, i32 1
  %19 = extractelement <4 x i64> %11, i32 2
  %20 = getelementptr inbounds float* %I0, i64 %19
  %21 = insertelement <4 x float*> %18, float* %20, i32 2
  %22 = extractelement <4 x i64> %11, i32 3
  %23 = getelementptr inbounds float* %I0, i64 %22
  %24 = insertelement <4 x float*> %21, float* %23, i32 3
  %25 = extractelement <4 x i64> %12, i32 0
  %26 = getelementptr inbounds float* %I0, i64 %25
  %27 = insertelement <4 x float*> undef, float* %26, i32 0
  %28 = extractelement <4 x i64> %12, i32 1
  %29 = getelementptr inbounds float* %I0, i64 %28
  %30 = insertelement <4 x float*> %27, float* %29, i32 1
  %31 = extractelement <4 x i64> %12, i32 2
  %32 = getelementptr inbounds float* %I0, i64 %31
  %33 = insertelement <4 x float*> %30, float* %32, i32 2
  %34 = extractelement <4 x i64> %12, i32 3
  %35 = getelementptr inbounds float* %I0, i64 %34
  %36 = insertelement <4 x float*> %33, float* %35, i32 3
  %37 = getelementptr float* %14, i32 0
  %38 = bitcast float* %37 to <4 x float>*
  %wide.load = load <4 x float>* %38, align 4
  %39 = getelementptr float* %14, i32 4
  %40 = bitcast float* %39 to <4 x float>*
  %wide.load4 = load <4 x float>* %40, align 4
  %41 = fmul <4 x float> %wide.load, %broadcast.splat6
  %42 = fmul <4 x float> %wide.load4, %broadcast.splat6
  %43 = extractelement <4 x i64> %9, i32 0
  %44 = getelementptr inbounds float* %I0, i64 %43
  %45 = insertelement <4 x float*> undef, float* %44, i32 0
  %46 = extractelement <4 x i64> %9, i32 1
  %47 = getelementptr inbounds float* %I0, i64 %46
  %48 = insertelement <4 x float*> %45, float* %47, i32 1
  %49 = extractelement <4 x i64> %9, i32 2
  %50 = getelementptr inbounds float* %I0, i64 %49
  %51 = insertelement <4 x float*> %48, float* %50, i32 2
  %52 = extractelement <4 x i64> %9, i32 3
  %53 = getelementptr inbounds float* %I0, i64 %52
  %54 = insertelement <4 x float*> %51, float* %53, i32 3
  %55 = extractelement <4 x i64> %10, i32 0
  %56 = getelementptr inbounds float* %I0, i64 %55
  %57 = insertelement <4 x float*> undef, float* %56, i32 0
  %58 = extractelement <4 x i64> %10, i32 1
  %59 = getelementptr inbounds float* %I0, i64 %58
  %60 = insertelement <4 x float*> %57, float* %59, i32 1
  %61 = extractelement <4 x i64> %10, i32 2
  %62 = getelementptr inbounds float* %I0, i64 %61
  %63 = insertelement <4 x float*> %60, float* %62, i32 2
  %64 = extractelement <4 x i64> %10, i32 3
  %65 = getelementptr inbounds float* %I0, i64 %64
  %66 = insertelement <4 x float*> %63, float* %65, i32 3
  %67 = getelementptr float* %44, i32 0
  %68 = bitcast float* %67 to <4 x float>*
  %wide.load7 = load <4 x float>* %68, align 4
  %69 = getelementptr float* %44, i32 4
  %70 = bitcast float* %69 to <4 x float>*
  %wide.load8 = load <4 x float>* %70, align 4
  %71 = fmul <4 x float> %wide.load7, %broadcast.splat10
  %72 = fmul <4 x float> %wide.load8, %broadcast.splat10
  %73 = fadd <4 x float> %41, %71
  %74 = fadd <4 x float> %42, %72
  %75 = add nsw <4 x i64> %9, <i64 1, i64 1, i64 1, i64 1>
  %76 = add nsw <4 x i64> %10, <i64 1, i64 1, i64 1, i64 1>
  %77 = extractelement <4 x i64> %75, i32 0
  %78 = getelementptr inbounds float* %I0, i64 %77
  %79 = insertelement <4 x float*> undef, float* %78, i32 0
  %80 = extractelement <4 x i64> %75, i32 1
  %81 = getelementptr inbounds float* %I0, i64 %80
  %82 = insertelement <4 x float*> %79, float* %81, i32 1
  %83 = extractelement <4 x i64> %75, i32 2
  %84 = getelementptr inbounds float* %I0, i64 %83
  %85 = insertelement <4 x float*> %82, float* %84, i32 2
  %86 = extractelement <4 x i64> %75, i32 3
  %87 = getelementptr inbounds float* %I0, i64 %86
  %88 = insertelement <4 x float*> %85, float* %87, i32 3
  %89 = extractelement <4 x i64> %76, i32 0
  %90 = getelementptr inbounds float* %I0, i64 %89
  %91 = insertelement <4 x float*> undef, float* %90, i32 0
  %92 = extractelement <4 x i64> %76, i32 1
  %93 = getelementptr inbounds float* %I0, i64 %92
  %94 = insertelement <4 x float*> %91, float* %93, i32 1
  %95 = extractelement <4 x i64> %76, i32 2
  %96 = getelementptr inbounds float* %I0, i64 %95
  %97 = insertelement <4 x float*> %94, float* %96, i32 2
  %98 = extractelement <4 x i64> %76, i32 3
  %99 = getelementptr inbounds float* %I0, i64 %98
  %100 = insertelement <4 x float*> %97, float* %99, i32 3
  %101 = getelementptr float* %78, i32 0
  %102 = bitcast float* %101 to <4 x float>*
  %wide.load11 = load <4 x float>* %102, align 4
  %103 = getelementptr float* %78, i32 4
  %104 = bitcast float* %103 to <4 x float>*
  %wide.load12 = load <4 x float>* %104, align 4
  %105 = fmul <4 x float> %wide.load11, %broadcast.splat14
  %106 = fmul <4 x float> %wide.load12, %broadcast.splat14
  %107 = fadd <4 x float> %73, %105
  %108 = fadd <4 x float> %74, %106
  %109 = getelementptr inbounds float* %O0, i64 %43
  %110 = insertelement <4 x float*> undef, float* %109, i32 0
  %111 = getelementptr inbounds float* %O0, i64 %46
  %112 = insertelement <4 x float*> %110, float* %111, i32 1
  %113 = getelementptr inbounds float* %O0, i64 %49
  %114 = insertelement <4 x float*> %112, float* %113, i32 2
  %115 = getelementptr inbounds float* %O0, i64 %52
  %116 = insertelement <4 x float*> %114, float* %115, i32 3
  %117 = getelementptr inbounds float* %O0, i64 %55
  %118 = insertelement <4 x float*> undef, float* %117, i32 0
  %119 = getelementptr inbounds float* %O0, i64 %58
  %120 = insertelement <4 x float*> %118, float* %119, i32 1
  %121 = getelementptr inbounds float* %O0, i64 %61
  %122 = insertelement <4 x float*> %120, float* %121, i32 2
  %123 = getelementptr inbounds float* %O0, i64 %64
  %124 = insertelement <4 x float*> %122, float* %123, i32 3
  %125 = getelementptr float* %109, i32 0
  %126 = bitcast float* %125 to <4 x float>*
  store <4 x float> %107, <4 x float>* %126, align 4
  %127 = getelementptr float* %109, i32 4
  %128 = bitcast float* %127 to <4 x float>*
  store <4 x float> %108, <4 x float>* %128, align 4
  %129 = add nuw nsw <4 x i64> %induction, <i64 1, i64 1, i64 1, i64 1>
  %130 = add nuw nsw <4 x i64> %induction1, <i64 1, i64 1, i64 1, i64 1>
  %131 = trunc <4 x i64> %129 to <4 x i32>
  %132 = trunc <4 x i64> %130 to <4 x i32>
  %133 = icmp eq <4 x i32> %131, %broadcast.splat16
  %134 = icmp eq <4 x i32> %132, %broadcast.splat16
  %index.next = add i64 %index, 8
  %135 = icmp eq i64 %index.next, %end.idx.rnd.down
  br i1 %135, label %middle.block, label %vector.body, !llvm.loop !1

middle.block:                                     ; preds = %vector.body, %.lr.ph
  %resume.val = phi i64 [ 1, %.lr.ph ], [ %end.idx.rnd.down, %vector.body ]
  %trunc.resume.val = phi i64 [ 1, %.lr.ph ], [ %end.idx.rnd.down, %vector.body ]
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block
  br label %136

; <label>:136                                     ; preds = %136, %scalar.ph
  %indvars.iv = phi i64 [ %trunc.resume.val, %scalar.ph ], [ %indvars.iv.next, %136 ]
  %137 = add nsw i64 %indvars.iv, %8
  %138 = add nsw i64 %137, -1
  %139 = getelementptr inbounds float* %I0, i64 %138
  %140 = load float* %139, align 4, !tbaa !4
  %141 = fmul float %140, %c0
  %142 = getelementptr inbounds float* %I0, i64 %137
  %143 = load float* %142, align 4, !tbaa !4
  %144 = fmul float %143, %c1
  %145 = fadd float %141, %144
  %146 = add nsw i64 %137, 1
  %147 = getelementptr inbounds float* %I0, i64 %146
  %148 = load float* %147, align 4, !tbaa !4
  %149 = fmul float %148, %c2
  %150 = fadd float %145, %149
  %151 = getelementptr inbounds float* %O0, i64 %137
  store float %150, float* %151, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %size_x
  br i1 %exitcond, label %._crit_edge.loopexit, label %136, !llvm.loop !8

._crit_edge.loopexit:                             ; preds = %middle.block, %136
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %lftr.wideiv6 = trunc i64 %indvars.iv.next5 to i32
  %exitcond7 = icmp eq i32 %lftr.wideiv6, %size_y
  br i1 %exitcond7, label %._crit_edge3.loopexit, label %.preheader

._crit_edge3.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %._crit_edge3.loopexit, %0
  ret void
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"Ubuntu clang version 3.5-1ubuntu1 (trunk) (based on LLVM 3.5)"}
!1 = metadata !{metadata !1, metadata !2, metadata !3}
!2 = metadata !{metadata !"llvm.vectorizer.width", i32 1}
!3 = metadata !{metadata !"llvm.vectorizer.unroll", i32 1}
!4 = metadata !{metadata !5, metadata !5, i64 0}
!5 = metadata !{metadata !"float", metadata !6, i64 0}
!6 = metadata !{metadata !"omnipotent char", metadata !7, i64 0}
!7 = metadata !{metadata !"Simple C/C++ TBAA"}
!8 = metadata !{metadata !8, metadata !2, metadata !3}
